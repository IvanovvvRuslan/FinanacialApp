@using Microsoft.AspNetCore.WebUtilities
@using Services
@using Task11_Common.ViewModels

@page "/financialoperations"
@inject IFinancialOperationService FinancialOperationService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@rendermode InteractiveServer


<MudText Typo="Typo.h4" Style="margin-bottom: 10px; margin-top: 20px;">Financial Operations</MudText>

<MudButton Variant="Variant.Filled" Color="Color.Primary" Style="margin-bottom: 20px" OnClick="CreateFinancialOperation">Create</MudButton>

@if (string.IsNullOrEmpty(_errorMessage))
{
    if (_financialOperations == null)
    {
        <MudText>Loading...</MudText>
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <MudTable Items="_financialOperations" Hover="true" FixedHeader="true">
            <HeaderContent>
                <MudTh>Date</MudTh>
                <MudTh>Amount</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Operation Type</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            
            <RowTemplate>
                <MudTd DataLabel="Date">@context.Date?.ToString("dd.MM.yyyy")</MudTd>
                <MudTd DataLabel="Amount">@(context.Amount.ToString("# ##0.00"))</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Operation Type">@context.OperationTypeName</MudTd>
                <MudTd DataLabel="Action">
                    @* <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Default" OnClick="@(() => NavigateToEdit(@context.Id))">Edit</MudButton> *@
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Default" OnClick="@(() => EditFinancialOperation(@context.Id))">Edit</MudButton>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => 
                                        ConfirmDelete(@context.Id, @context.Date, @context.Amount, @context.Description, context.OperationTypeName))">Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>

        @if (!string.IsNullOrEmpty(_resultMessage))
        {
            Snackbar.Add(_resultMessage, Severity.Success);
            _resultMessage = "";
        }
        else
        {
            Snackbar.Add(_errorMessage, Severity.Error);
            _errorMessage = "";
        }
    }
}


@code {
    private IEnumerable<FinancialOperationViewModelCommon> _financialOperations;
    private string _errorMessage;
    private string _resultMessage;

    protected override async Task OnInitializedAsync()              
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);                       //DELETE !!!!!!!!!!
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("message", out var message))
        {
            _resultMessage = message;
        }

        try
        {
            _financialOperations = await FinancialOperationService.GetFinancialOperations();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private void NavigateToEdit(int id)                     //DELETE !!!!!!!!!!
    {
        NavigationManager.NavigateTo($"/financialoperations/edit/{id}?message={_resultMessage}");
    }

    #region DELETE METHOD
    private async Task DeleteFinancialOperation(int id)
    {
        try
        {
            _resultMessage = await FinancialOperationService.DeleteFinancialOperation(id);
            _financialOperations = await FinancialOperationService.GetFinancialOperations();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }    
    }

    private async Task ConfirmDelete(int id, DateTime? date, decimal amount, string description, string operationTypeName)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            BackdropClick = false,
        };

        var parameters = new DialogParameters<FinancialOperationDeleteDialog>
        {
            { x => x.Date, date},
            { x => x.Amount, amount},
            { x => x.Description, description},
            { x => x.OperationTypeName, operationTypeName}
        };

        var dialog = await DialogService.ShowAsync<FinancialOperationDeleteDialog>("Confirm Delete", parameters, options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await DeleteFinancialOperation(id);
        }
    }
    #endregion

    #region CREATE METHOD
    private async Task CreateFinancialOperation()
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            BackdropClick = false
        };

        var dialog = await DialogService.ShowAsync<FinancialOperationCreateDialog>("Create Financial Operation", options);

        var result = await dialog.Result;

        if (!result.Canceled && result.Data is FinancialOperationViewModelCommon newFinancialOperation)
        {
            _resultMessage = await FinancialOperationService.CreateFinancialOperation(newFinancialOperation);

            _financialOperations = await FinancialOperationService.GetFinancialOperations();
        }
    }
    #endregion

    private async Task EditFinancialOperation(int id)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            BackdropClick = false
        };

        var parameters = new DialogParameters<FinancialOperationEditDialog>
        {
            {x => x.Id, id }
        };

        var dialog = await DialogService.ShowAsync<FinancialOperationEditDialog>("Edit Financial Operation", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled && result.Data is FinancialOperationViewModelCommon editedFinancialOperation)
        {
            _resultMessage = await FinancialOperationService.UpdateFinancialOperation(id, editedFinancialOperation);

            _financialOperations = await FinancialOperationService.GetFinancialOperations();
        }
    }
}
