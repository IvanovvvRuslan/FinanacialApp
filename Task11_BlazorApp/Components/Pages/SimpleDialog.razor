@using Services
@using Task11_Common.ViewModels

@inject IOperationTypeService OperationTypeService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<MudText Typo="Typo.h4" Style="margin-bottom: 20px; margin-top: 20px">Edit Operation Type</MudText>

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6">Are you sure you want to delete this item?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="() => MudDialog.Close(DialogResult.Ok(true))">Delete</MudButton>
        <MudButton Color="Color.Secondary" OnClick="() => MudDialog.Close(DialogResult.Cancel())">Delete</MudButton>
    </DialogActions>
</MudDialog>



@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public int Id { get; set; }
    private string errorMessage;
    private string resultMessage;

    private string selectedValue;
    public string IsIncomeValue 
    { 
        get => operationType.IsIncome.ToString(); 
        set => operationType.IsIncome = bool.Parse(value); 
    }

    private OperationTypeViewModelCommon operationType;

    protected override async Task OnInitializedAsync()
    {
        // try
        // {
        //     operationType = await OperationTypeService.GetOperationTypeById(Id);
        // }
        // catch (Exception ex)
        // {
        //     errorMessage = ex.Message;
        // }    
    }

    private async Task UpdateOperationType()
    {
        resultMessage = await OperationTypeService.UpdateOperationType(operationType.Id, operationType);
        NavigationManager.NavigateTo("/operationtypes");
    }

    private void HandleChange(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "true")
        {
            operationType.IsIncome = true;
        }
        else
        {
            operationType.IsIncome = false;
        }
    }

    private void Cancel()
    {
        // NavigationManager.NavigateTo("/operationtypes");    
    }
}
