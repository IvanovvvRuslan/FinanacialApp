@using Services
@using Task11_Common.ViewModels

@page "/operationtypes/edit/{id:int}"

@inject IOperationTypeService OperationTypeService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<MudText Typo="Typo.h4" Style="margin-bottom: 20px; margin-top: 20px">Edit Operation Type</MudText>

@if (string.IsNullOrEmpty(errorMessage))
{
    if (operationType == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <MudGrid>
            <MudItem xs="1" Style="display: flex; align-items: center">
                <MudText>
                    New name:
                </MudText>
            </MudItem>
            <MudItem xs="2">
                <MudTextField @bind-Value="@operationType.Name" Label="Enter a new name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
        </MudGrid>

        <MudGrid>
            <MudItem xs="1" style="display: flex; align-items: center">
                <MudText>
                    Income/Expense:
                </MudText>
            </MudItem>
            <MudItem xs="2">
                <MudSelect T="bool" @bind-Value="operationType.IsIncome" Margin="Margin.Dense" Label="Select Type" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="true">Income</MudSelectItem>
                    <MudSelectItem Value="false">Expense</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>
        <p>Selected Value: @operationType.IsIncome</p> 

        <MudGrid>
            <MudItem xs="1" Style="display: flex; align-items: center">
                <MudText>
                    New description:
                </MudText>
            </MudItem>
            <MudItem xs="4">
                <MudTextField @bind-Value="@operationType.Description" Label="Enter a new description" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
        </MudGrid>

        <MudButton Variant="Variant.Outlined" Style="margin-top: 30px" OnClick="UpdateOperationType">Update</MudButton>
        <MudButton Variant="Variant.Outlined" Style="margin-top: 30px" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>

        if (!String.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-success">@resultMessage</div>
        }
    }
}


@code {
    [Parameter]
    public int Id { get; set; }
    private string errorMessage;
    private string resultMessage;

    private string selectedValue;
    public string IsIncomeValue 
    { 
        get => operationType.IsIncome.ToString(); 
        set => operationType.IsIncome = bool.Parse(value); 
    }

    private OperationTypeViewModelCommon operationType;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            operationType = await OperationTypeService.GetOperationTypeById(Id);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }    
    }

    private async Task UpdateOperationType()
    {
        resultMessage = await OperationTypeService.UpdateOperationType(operationType.Id, operationType);
        NavigationManager.NavigateTo("/operationtypes");
    }

    private void HandleChange(ChangeEventArgs e)
    {
        if (e.Value.ToString() == "true")
        {
            operationType.IsIncome = true;
        }
        else
        {
            operationType.IsIncome = false;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/operationtypes");    
    }
}
