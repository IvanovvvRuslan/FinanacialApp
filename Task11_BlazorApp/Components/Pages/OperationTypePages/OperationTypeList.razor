@using Microsoft.AspNetCore.WebUtilities
@using Services
@using Task11_Common.ViewModels
@using Task11_BlazorApp.Components.Pages

@page "/operationtypes"
@inject IOperationTypeService OperationTypeService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@rendermode InteractiveServer


<MudText Typo="Typo.h4" Style="margin-bottom: 10px; margin-top: 20px;">Operation Types</MudText>

<MudButton Variant="Variant.Filled" Color="Color.Primary" Style="margin-bottom: 20px" OnClick="CreateOperationType">Create</MudButton>

@if (string.IsNullOrEmpty(_errorMessage))
{
    if (_operationTypes == null)
    {
        <MudText>Loading...</MudText>
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <MudTable Items="_operationTypes" Hover="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Income/Expense</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Income/Expense">@(@context.IsIncome ? "Income" : "Expense")</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Action">
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Default" OnClick="@(() => EditOperationType(@context.Id))">Edit</MudButton>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => 
                                        ConfirmDelete(@context.Id, @context.Name, @context.IsIncome, @context.Description))">Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
            
        @if (!string.IsNullOrEmpty(_resultMessage))
        {
            Snackbar.Add(_resultMessage, Severity.Success);
            _resultMessage = "";
        }
    }
}
else
{
    Snackbar.Add(_errorMessage, Severity.Error);
    _errorMessage = "";
}

@code {
    private IEnumerable<OperationTypeViewModelCommon> _operationTypes;
    private string _errorMessage;
    private string _resultMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _operationTypes = await OperationTypeService.GetOperationTypes();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    #region DELETE METHOD
    private async Task DeleteOperationType(int id)
    {
        try
        {
            _resultMessage = await OperationTypeService.DeleteOperationType(id);
            _operationTypes = await OperationTypeService.GetOperationTypes();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

    private async Task ConfirmDelete(int id, string name, bool isIncome, string description)
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Large,
            BackdropClick = false
        };

        var parameters = new DialogParameters<OperationTypeDeleteDialog>
        {
            { x => x.Name, name},
            { x => x.IsIncome, isIncome ? "Income" : "Expense"},
            { x => x.Description, description}
        };

        var dialog = await DialogService.ShowAsync<OperationTypeDeleteDialog>("Confirm Delete", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteOperationType(id);
        }
    }
    #endregion

    #region CREATE METHOD
    private async Task CreateOperationType()
    {
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            BackdropClick = false
        };

        var dialog = await DialogService.ShowAsync<OperationTypeCreateDialog>("Create Operation Type", options);

        var result = await dialog.Result;

        if (!result.Canceled && result.Data is OperationTypeViewModelCommon newOperationType)
        {
            _resultMessage = await OperationTypeService.CreateOperationType(newOperationType);

            _operationTypes = await OperationTypeService.GetOperationTypes();
        }
    }
    #endregion

    #region EDIT METHOD
    private async Task EditOperationType(int id)
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                BackdropClick = false
            };

        var parameters = new DialogParameters<OperationTypeEditDialog>
        {
            {x => x.Id, id}
        };

        var dialog = await DialogService.ShowAsync<OperationTypeEditDialog>("Edit Operation Type", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled && result.Data is OperationTypeViewModelCommon editedOperationType)
        {
            _resultMessage = await OperationTypeService.UpdateOperationType(id, editedOperationType);

            _operationTypes = await OperationTypeService.GetOperationTypes();
        }
    }
    #endregion
}