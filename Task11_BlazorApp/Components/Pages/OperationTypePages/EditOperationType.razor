@using Services
@using Task11_Common.ViewModels

@page "/operationtypes/edit/{id:int}"

@inject IOperationTypeService OperationTypeService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<MudText Typo="Typo.h4" Style="margin-bottom: 20px; margin-top: 20px">Edit Operation Type</MudText>

@if (string.IsNullOrEmpty(_errorMessage))
{
    if (_operationType == null)
    {
        <MudText>Loading...</MudText>
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <EditForm Model="@_operationType" OnValidSubmit="UpdateOperationType">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudGrid>
                <MudItem xs="1" Style="display: flex; align-items: center">
                    <MudText>
                        New name:
                    </MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudTextField @bind-Value="@_operationType.Name" Label="Enter a new name" Required="true" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
            </MudGrid>

            <MudGrid>
                <MudItem xs="1" style="display: flex; align-items: center">
                    <MudText>
                        Income/Expense:
                    </MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudSelect T="bool" @bind-Value="_operationType.IsIncome" Margin="Margin.Dense" Label="Select Type" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="true">Income</MudSelectItem>
                        <MudSelectItem Value="false">Expense</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>
            
            <MudGrid>
                <MudItem xs="1" Style="display: flex; align-items: center">
                    <MudText>
                        New description:
                    </MudText>
                </MudItem>
                <MudItem xs="4">
                    <MudTextField @bind-Value="@_operationType.Description" Label="Enter a new description" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
            </MudGrid>

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Style="margin-top: 30px">Update</MudButton>
            <MudButton Variant="Variant.Outlined" Style="margin-top: 30px" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
        </EditForm>
    }
}


@code {
    [Parameter]
    public int Id { get; set; }
    private string _errorMessage;
    private string _resultMessage;
    private OperationTypeViewModelCommon _operationType;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _operationType = await OperationTypeService.GetOperationTypeById(Id);
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }    
    }

    private async Task UpdateOperationType()
    {
        _resultMessage = await OperationTypeService.UpdateOperationType(_operationType.Id, _operationType);
        NavigationManager.NavigateTo($"/operationtypes?message={_resultMessage}");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/operationtypes");    
    }
}
